# -*- coding: utf-8 -*-
"""Flight Delay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B0kVPC8N4NJa9hVqAyqb0eayieRxjAnN
"""

!pip install kaggle

!kaggle datasets download -d shubhamsingh42/flight-delay-dataset-2018-2024

import zipfile
import pandas as pd

# Extract the contents of the ZIP file
with zipfile.ZipFile("/content/flight-delay-dataset-2018-2024.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")

# Now read the extracted CSV file
df = pd.read_csv('/content/flight_data_2018_2024.csv')
df.head()

print(f'AUC Score: {roc_auc:.2f}')

import xgboost as xgb
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('flight_data_2018_2024.csv')

# Feature selection
x = df[["Year", "Month", "DayofMonth", "DOT_ID_Marketing_Airline", "Flight_Number_Marketing_Airline",
       "DOT_ID_Operating_Airline", "Flight_Number_Operating_Airline", "OriginAirportID",
       "OriginStateFips", "DestAirportID", "DestStateFips", "CRSDepTime", "CRSArrTime"]]
y = df['Cancelled']

# Handle class imbalance
smote = SMOTE(random_state=10)
x, y = smote.fit_resample(x, y)

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=10)

# Standardize features
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

# Instantiate and fit XGBoost model
xgb_model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss')
xgb_model.fit(x_train, y_train)

# Make predictions
y_pred = xgb_model.predict(x_test)
y_prob = xgb_model.predict_proba(x_test)[:, 1]

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_prob)

print("Accuracy of the XGBoost model is: {:.2f}%".format(accuracy * 100))
print("AUC Score of the XGBoost model is: {:.2f}".format(roc_auc))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

# Confusion matrix heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='gray', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

df = pd.read_csv('flight_data_2018_2024.csv')

# Ensure 'Year', 'Month', and 'DayofMonth' are of integer type
df['Year'] = df['Year'].astype(int)
df['Month'] = df['Month'].astype(int)
df['DayofMonth'] = df['DayofMonth'].astype(int)

# Create the 'Date' column
df['Date'] = pd.to_datetime(df['Year'].astype(str) + '-' + df['Month'].astype(str) + '-' + df['DayofMonth'].astype(str))

# Set the 'Date' as the index
df.set_index('Date', inplace=True)

# Aggregate by day to get the average delay per day
daily_delay = df['ArrDelayMinutes'].resample('D').mean()

# Drop NaN values resulting from resampling
daily_delay.dropna(inplace=True)

# Split into training and testing sets
train_size = int(len(daily_delay) * 0.8)
train, test = daily_delay[0:train_size], daily_delay[train_size:]

# Fit ARIMA model
arima_model = ARIMA(train, order=(5, 1, 0))  # (p, d, q) parameters may need tuning
arima_model_fit = arima_model.fit()

# Forecast
forecast = arima_model_fit.forecast(steps=len(test))

# Evaluate the model
error = mean_squared_error(test, forecast)
print(f'Mean Squared Error: {error:.2f}')

# Plot results
plt.figure(figsize=(12, 6))
plt.plot(train.index, train, label='Train')
plt.plot(test.index, test, label='Test')
plt.plot(test.index, forecast, label='Forecast', color='red')
plt.title('Flight Delay Forecast')
plt.xlabel('Date')
plt.ylabel('Average Delay (Minutes)')
plt.legend()
plt.show()